#!/usr/bin/env python
from __future__ import print_function
import configargparse

import os
import random
import torch

import onmt.opts as opts
from onmt.utils.misc import use_gpu
from onmt.inputters.inputter import build_dataset_iter, lazily_load_dataset, \
    _load_fields, _collect_report_features
from onmt.model_builder import build_model
from onmt.utils.optimizers import build_optim
from onmt.trainer import build_trainer
from onmt.models import build_model_saver
from onmt.utils.logging import init_logger, logger
import codecs
import math

import torch.nn as nn
import torch.nn.functional as F
from itertools import count
from onmt.utils.misc import tile

import onmt.model_builder
import onmt.inputters as inputters
import onmt.decoders.ensemble


def _tally_parameters(model):
    n_params = sum([p.nelement() for p in model.parameters()])
    enc = 0
    dec = 0
    for name, param in model.named_parameters():
        if 'encoder' in name:
            enc += param.nelement()
        elif 'decoder' or 'generator' in name:
            dec += param.nelement()
    return n_params, enc, dec

def _check_save_model_path(opt):
    save_model_path = os.path.abspath(opt.save_model)
    model_dirname = os.path.dirname(save_model_path)
    if not os.path.exists(model_dirname):
        os.makedirs(model_dirname)

def build_reranker(opt, device_id, model, fields,
                  optim, data_type, model_saver=None):
    #train_loss = onmt.utils.loss.build_loss_compute(
    #    model, fields["tgt"].vocab, opt)
    #valid_loss = onmt.utils.loss.build_loss_compute(
    #    model, fields["tgt"].vocab, opt, train=False)

    trunc_size = opt.truncated_decoder  # Badly named...
    shard_size = opt.max_generator_batches
    norm_method = opt.normalization
    grad_accum_count = opt.accum_count
    n_gpu = opt.world_size
    if device_id >= 0:
        gpu_rank = opt.gpu_ranks[device_id]
    else:
        gpu_rank = 0
        n_gpu = 0
    gpu_verbose_level = opt.gpu_verbose_level
    n_hyps = opt.beam_size
    report_manager = onmt.utils.build_report_manager(opt)
    ranker = Ranker(model, optim, trunc_size,
                           shard_size, data_type, norm_method,
                           grad_accum_count, n_gpu, gpu_rank,
                           gpu_verbose_level, report_manager,
                           model_saver=model_saver, n_hyps=n_hyps, padding_idx = fields["tgt"].vocab.stoi[inputters.PAD_WORD])
    return ranker

class Ranker(object):
    def __init__(self, model, optim,
                 trunc_size=0, shard_size=32, data_type='text',
                 norm_method="sents", grad_accum_count=1, n_gpu=1, gpu_rank=1,
                 gpu_verbose_level=0, report_manager=None, model_saver=None,n_hyps=5, padding_idx=None):
        # Basic attributes.
        self.model = model
        self.optim = optim
        self.trunc_size = trunc_size
        self.shard_size = shard_size
        self.data_type = data_type
        self.norm_method = norm_method
        self.grad_accum_count = grad_accum_count
        self.n_gpu = n_gpu
        self.gpu_rank = gpu_rank
        self.gpu_verbose_level = gpu_verbose_level
        self.report_manager = report_manager
        self.model_saver = model_saver
        self.n_hyps = n_hyps
        self.padding_idx = padding_idx

        assert grad_accum_count > 0
        if grad_accum_count > 1:
            assert(self.trunc_size == 0), \
                """To enable accumulated gradients,
                   you must disable target sequence truncating."""
        self.criterion = nn.NLLLoss(
            ignore_index=self.padding_idx, reduce=False
        )

        # Set model in training mode.
        self.model.train()

    def get_scores(self, data_iter):
        self.model.eval()
        losses=[]
        for batch in data_iter:
            src = inputters.make_features(batch, 'src', self.data_type)
            _, src_lengths = batch.src
            tgt = inputters.make_features(batch, 'tgt')
            outputs, attns = self.model(src, tgt, src_lengths) #outputs is len X batch X rnn_size
            scores = self.model.generator(outputs)
            #print(tgt.size(), outputs.size(), scores.size())
            bsize = scores.size(1)
            gtruth = tgt[1:].view(-1)
            loss = -1.0*self.criterion(scores.view(-1,scores.size(2)), gtruth).view(-1, bsize).sum(0)
            #print(loss)
            losses.append(loss)
        return torch.cat(losses)

    def combine_rank(self, mtscores, lmscores, mult=5.0):
        tot_scores = mult*mtscores + lmscores
        hyp_scores = torch.stack([a[1:] for a in list(tot_scores.split(self.n_hyps+1))])
        raw_rank = (torch.topk(hyp_scores,1)[1] + 1).squeeze().tolist()
        inds = [a*(self.n_hyps+1) for a in list(range(len(raw_rank)))]
        #print(inds)
        final = [a+b for (a,b) in zip(raw_rank,inds)]
        return final

def training_opt_postprocessing(opt, device_id):
    if opt.word_vec_size != -1:
        opt.src_word_vec_size = opt.word_vec_size
        opt.tgt_word_vec_size = opt.word_vec_size

    if opt.layers != -1:
        opt.enc_layers = opt.layers
        opt.dec_layers = opt.layers

    if opt.rnn_size != -1:
        opt.enc_rnn_size = opt.rnn_size
        opt.dec_rnn_size = opt.rnn_size
        if opt.model_type == 'text' and opt.enc_rnn_size != opt.dec_rnn_size:
            raise AssertionError("""We do not support different encoder and
                                 decoder rnn sizes for translation now.""")

    opt.brnn = (opt.encoder_type == "brnn")

    if opt.rnn_type == "SRU" and not opt.gpu_ranks:
        raise AssertionError("Using SRU requires -gpu_ranks set.")

    if torch.cuda.is_available() and not opt.gpu_ranks:
        logger.info("WARNING: You have a CUDA device, \
                    should run with -gpu_ranks")

    if opt.seed > 0:
        torch.manual_seed(opt.seed)
        # this one is needed for torchtext random call (shuffled iterator)
        # in multi gpu it ensures datasets are read in the same order
        random.seed(opt.seed)
        # some cudnn methods can be random even after fixing the seed
        # unless you tell it to be deterministic
        torch.backends.cudnn.deterministic = True

    if device_id >= 0:
        torch.cuda.set_device(device_id)
        if opt.seed > 0:
            # These ensure same initialization in multi gpu mode
            torch.cuda.manual_seed(opt.seed)

    return opt
def main(opt, device_id):
    opt = training_opt_postprocessing(opt, device_id)
    init_logger(opt.log_file)
    # Load checkpoint if we resume from a previous training.
    if opt.train_from:
        logger.info('Loading checkpoint from %s' % opt.train_from)
        checkpoint = torch.load(opt.train_from,
                                map_location=lambda storage, loc: storage)
        fields = inputters.load_fields_from_vocab(
            checkpoint['vocab'], data_type=opt.data_type)

        # Load default opts values then overwrite it with opts from
        # the checkpoint. It's useful in order to re-train a model
        # after adding a new option (not set in checkpoint)
        dummy_parser = configargparse.ArgumentParser()
        opts.model_opts(dummy_parser)
        default_opt = dummy_parser.parse_known_args([])[0]

        model_opt = default_opt
        model_opt.__dict__.update(checkpoint['opt'].__dict__)
    else:
        checkpoint = None
        model_opt = opt
    # Build model.
    model = build_model(model_opt, opt, fields, checkpoint)
    n_params, enc, dec = _tally_parameters(model)
    logger.info('encoder: %d' % enc)
    logger.info('decoder: %d' % dec)
    logger.info('* number of parameters: %d' % n_params)
    _check_save_model_path(opt)
    # Build optimizer.
    optim = build_optim(model, opt, checkpoint)
    # Build model saver
    model_saver = build_model_saver(model_opt, opt, model, fields, optim)

    src_features, tgt_features = _collect_report_features(fields)
    for j, feat in enumerate(src_features):
        logger.info(' * src feature %d size = %d'
                    % (j, len(fields[feat].vocab)))
    for j, feat in enumerate(tgt_features):
        logger.info(' * tgt feature %d size = %d'
                    % (j, len(fields[feat].vocab)))
    if use_gpu(opt):
        cur_device = "cuda"
    else:
        cur_device = "cpu"
    #print(opt.src, opt.tgt)
    data = inputters. \
        build_dataset(fields,
                      opt.data_type,
                      src_path=opt.src,
                      src_data_iter=None,
                      tgt_path=opt.tgt,
                      tgt_data_iter=None,
                      src_dir=None,
                      sample_rate=opt.sample_rate,
                      window_size=opt.window_size,
                      window_stride=opt.window_stride,
                      window=opt.window,
                      use_filter_pred=False,
                      image_channel_size=opt.image_channel_size)
    '''data = inputters. \
        build_dataset(fields,
                      opt.data_type,
                      src_path=opt.src,
                      tgt_path=opt.tgt,
                      src_dir = opt.src_dir)'''
    data_iter = inputters.OrderedIterator(
        dataset=data, device=cur_device,
        batch_size=opt.batch_size,
        train=False,shuffle=False, sort=False, sort_within_batch=True)
    #print(len(data_iter.data()))
    ranker = build_reranker(opt, device_id, model, fields, optim, opt.data_type, model_saver=model_saver)
    lmscores = ranker.get_scores(data_iter)
    mtscore_list=[]
    f = open(opt.scores,"r")
    for line in f:
      mtscore_list.append(float(line.strip().split()[0]))
    mtscores = torch.cuda.FloatTensor(mtscore_list)
    selected = ranker.combine_rank(mtscores, lmscores, opt.mt_mul)
    #print(mtscores, lmscores)
    print(selected)
    f = open(opt.tgt,'r').readlines()
    cands=[]
    for ind in selected:
        cands.append(f[ind])
    outf = open(opt.output,'w+')
    for line in cands:
        outf.write(line)
    outf.close()
    #trainer = build_trainer(opt, device_id, model, fields,
    #                        optim, data_type, model_saver=model_saver)

    # Do training.
    if len(opt.gpu_ranks):
        logger.info('Starting training on GPU: %s' % opt.gpu_ranks)
    else:
        logger.info('Starting training on CPU, could be very slow')

if __name__ == "__main__":
    parser = configargparse.ArgumentParser(
        description='train.py',
        formatter_class=configargparse.ArgumentDefaultsHelpFormatter)

    opts.add_md_help_argument(parser)
    opts.model_opts(parser)
    opts.train_opts(parser)

    opt = parser.parse_args()
    main(opt)
